<template>
  <div id="syscustomer">
    <page-header-wrapper>
      <!-- 搜索/筛选栏 查询/重置 -->
      <a-card :bordered="false">
        <!-- 右键菜单 -->
        <a-menu class="menustyle" :style="menuStyle" v-if="menuVisible">
          <a-menu-item>
            <a @click="deleteAll">批量删除</a>
          </a-menu-item>
        </a-menu>
        <!-- 新建 -->
        <div class="table-operator" :title="state ? '修改信息' : '新增信息'">
          <a-button type="primary" icon="plus" @click="handleAdd">新建</a-button>
        </div>
        <!-- 表格 -->
        <s-table
          ref="table"
          size="small"
          rowKey="id"
          :columns="columns"
          :data="loadData"
          :alert="true"
          :rowSelection="rowSelection"
          bordered
          :customRow="setRow"
        >
          <span slot="serial" slot-scope="text, record, index">
            {{ index + 1 }}
          </span>
          <!-- 图片 -->
          <span slot="pic" slot-scope="text, record" type="primary" @click="enlargeImg(record)">
            <img style="width: 50px; height: 50px" :src="record.icon" />
          </span>
          <!-- 审核 -->
          <span slot="status" slot-scope="text">
            <a-badge :status="text | statusTypeFilter" :text="text | statusFilter" />
          </span>
          <span slot="description" slot-scope="text">
            <ellipsis :length="4" tooltip>{{ text }}</ellipsis>
          </span>
          <span slot="action" slot-scope="text, record">
            <template>
              <a @click="handleEdit(record)">修改</a>
              <a-divider type="vertical" />
              <a-popconfirm title="确定要删除吗?" ok-text="确定" cancel-text="取消" @confirm="handleDel(record)">
                <a>删除</a>
              </a-popconfirm>
            </template>
          </span>
        </s-table>
      </a-card>
      <!-- 抽屉 -->
      <template>
        <div>
          <a-drawer
            :title="state ? '修改客服' : '新增客服'"
            :placement="placement"
            :closable="false"
            :visible="visible"
            @close="onClose"
            width="800px"
          >
            <a-form-model
              :model="ruleForm"
              :label-col="labelCol"
              :wrapper-col="wrapperCol"
              :rules="rules"
              ref="ruleForm"
            >
              <a-form-model-item label="客服名称"  :required="true">
                <a-input v-model="ruleForm.name" />
              </a-form-model-item>
              <a-form-model-item label="手机号"  :required="true">
                <a-input v-model="ruleForm.phone" />
              </a-form-model-item>


              <a-button type="primary" @click="handleOk" style="margin-left: 17%"> 确定 </a-button>
            </a-form-model>
          </a-drawer>
        </div>
      </template>

      <div>
        <!-- 图片预览 -->
        <a-modal v-model="enlarge" title="预览" @ok="en" okText="完成" width="500px" cancelText="关闭">
          <img style="width: 200px; height: 200px" :src="icooon" class="preview" />
        </a-modal>
      </div>
    </page-header-wrapper>
  </div>
</template>

<script>
// 引入表格组件 和
import { STable, Ellipsis } from '@/components'
// 引入调用接口方法
import {  editUser, deleteCompany, filesCompany, } from '@/api/company'


import { TreeSelect } from 'ant-design-vue'
const SHOW_PARENT = TreeSelect.SHOW_ALL // 选中所有子节点,只渲染父节点名称,如果取消,点哪个渲染哪个



import {  getQueryContactUs ,getPower, editContactUs ,deteleContactUs} from '@/api/system'



import HeadCut from '@/views/system/user/HeadCut'


const columns = [
  {
    title: '#',
    width: '70px',
    scopedSlots: { customRender: 'serial' },
    align: 'center',
  },
  {
    title: '客服名称',
    width: '100px',
    dataIndex: 'name',
    align: 'center',
  },
  {
    title: '电话号',
    width: '100px',
    dataIndex: 'phone',
    align: 'center',
  },

  {
    title: '创建时间',
    width: '100px',
    dataIndex: 'createdDate',
    align: 'center',
  },
  {
    title: '操作',
    dataIndex: 'action',
    width: '100px',
    scopedSlots: { customRender: 'action' },
    align: 'center',
  },
]
const statusMap = {
  1: {
    status: 'default',
    text: '待认证',
  },
  2: {
    status: 'success',
    text: '已认证',
  },
  3: {
    status: 'error',
    text: '未通过',
  },
}
function getBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result)
    reader.onerror = (error) => reject(error)
  })
}
export default {
  name: 'syscustomer',
  components: {
    STable,
    Ellipsis,
    HeadCut,
  },
  data() {
    this.columns = columns
    return {
      isagent:false,
      preview: false,
      preview1: false,
      // 公司类型下拉
      size: 'default',
      // 上传图片
      previewVisible: false,
      previewVisible2: false,
      previewImage: '',
      previewImage2: '',
      // 新增,修改按钮弹窗状态
      visiblea: false,
      // 抽屉要从哪边显示
      placement: 'right',
      // 上传图片要用到的数组
      fileList: [],
      fileList2: [],
      labelCol: { span: 6 },
      wrapperCol: { span: 14 },
      // 右键菜单显示/隐藏
      menuVisible: false,
      //新增修改状态
      state: false,
      idfalse: false,

      //用户表单
      userForm: {
        phone:"", //手机号
        role: "", //角色
        userName:"", //用户名称
        password:"", //密码
        img:"", //用户头像
      },

      ruleForm: {
            //表单数据
            id: '',
            name: '', //客服名称
            phone: '', //手机号
      },

      roleType:[],  //角色列表吗

      companyForm: {
        companyName: '',
        companyType: 0,
        userId: '',
        icon: '',
        licenseUrl: '',
        describe: '',
        nickName: '',
        introduce: '',
        id: 0,
        oldImg: '',
      },
      oldImg: [],
      // 表单验证
      rules: {


      },
      //  图片弹窗
      icooon: '',
      enlarge: false,
      //   增加修改弹窗状态
      visible: false,
      // 右键菜单样式
      menuStyle: {
        position: 'fixed',
        top: '0',
        left: '0',
        zIndex: 1,
        borderRadius: '5px',
        border: '1px solid #eee',
      },
      // create model
      userConfigIsShow: true,
      visible: false,
      // confirmLoading: false,
      mdl: null,
      // 高级搜索 展开/关闭
      advanced: false,
      // 查询参数
      queryParam: {},
      queryCondition: {
        //名称
        name: '',

      },
      // 分页参数
      pageFrom: {
        // pageNum: 1, //第几次请求
        // pageSize: 10, //每页显示几条
        // totalPages: 0, //请求总次数
        // totalSize: 0, //所有数据数量
      },
      // 加载数据方法 必须为 Promise 对象
      loadData: (parameter) => {
        const requestParameters = Object.assign({}, parameter, this.pageFrom)
        return getQueryContactUs(requestParameters, this.queryCondition)
          .then((res) => {
            if (res.code == 200) {
              return {
                data: res.data,
                pageNo: Number(res.data.length) ,
                pageSize: Number(50) ,
                totalCount: Number(res.data.length) ,
                totalPage: Number(1) ,
              }
            } else {
              return
            }
          })
          .catch((err) => {
            alert(err)
          })
      },
      //表格选中行的ID
      selectedRowKeys: [],
      treeData:[],


      // 点击修改时默认选中项
      oldPowerList:[],

      SHOW_PARENT,
      //表格选中行的所有数据
      selectedRows: [],
      // 公司类型
      typecompanya: [],

      companyType: '',

      typeId: '',
    }
  },
  filters: {
    statusFilter(type) {
      return statusMap[type].text
    },
    statusTypeFilter(type) {
      return statusMap[type].status
    },
  },
  computed: {
    rowSelection() {
      return {
        selectedRowKeys: this.selectedRowKeys,
        onChange: this.onSelectChange,
      }
    },
  },
  methods: {

    onChangeTreeSelect(value, node, extra) {


         this.ruleForm.powerList = [...value]
    },
    onClose() {
      this.visible = false
    },
    onChange(e) {
      this.placement = e.target.value
    },



    setavatar(id, url) {
      this.companyForm.icon = url
      this.preview = true
    },
    setavatar1(id, url) {
      this.companyForm.licenseUrl = url
      this.preview1 = true
    },
    // 下拉树
    typeTreea(value) {
      this.companyForm.companyType = this.typecompanya[value].id
      this.companyType = this.typecompanya[value].companyType
    },
    // 上传图片
    handleCancel() {
      this.previewVisible = false
    },
    handleCancel2() {
      this.previewVisible = false
    },


    enlargeImg(record) {
      this.icooon = record.icon
      this.enlarge = true
    },
    en(e) {
      this.enlarge = false
    },
    //新增
    handleAdd() {
      this.state = false
      this.isagent =false;


      this.oldPowerList = []

      this.ruleForm.name = ''
      this.ruleForm.phone = ''
      
    },



    // 修改
    async handleEdit(record) {

         this.state =true;
         this.fromFlag = true
         this.visible = true
         this.ruleForm.id = record.id
         this.ruleForm.name = record.name;
         this.ruleForm.phone = record.phone;

    },
    // 删除
    handleDel(record) {

      return deteleContactUs({
        id: record.id,
      })
      .then((res) => {
        this.$refs.table.refresh(false)
        this.$notification.success({
          message: '提示',
          description: res.msg,
        })
      })
    },
    // 批量删除
    deleteAll(record) {

      if (this.selectedRowKeys.length > 0) {
        var that = this
        this.$confirm({
          title: '警示',
          content: '确定要全部删除吗?',
          onOk() {
            return Promise.all(
              that.selectedRowKeys.map(e => deteleContactUs({
                id: e
              }))
            ).then(() => {
              that.$refs.table.refresh(false)
              that.selectedRowKeys = []
              that.$notification.success({
                message: '提示',
                description: '删除成功',
              })
            })
          },
          onCancel() {},
        })
      }
    },
    // 提交
    handleOk(e) {
      this.$refs.ruleForm.validate((valid) => {

        // 校验未全部通过，结束当前提交 (验证失败)

         // 保存this,再递归函数中使用
            let that = this
            // 递归函数,用于添加选中权限的父级
            function pushParentId(tree) {
               for (let i = 0; i < tree.length; i++) {
                  // 对比选中列表,如果存在当前循环到的id,并且不存在它的父级Id,就把它的父级添加进去,并重新开启循环
                  if (
                     that.ruleForm.powerList.indexOf(tree[i].id) != -1 &&
                     that.ruleForm.powerList.indexOf(tree[i].pid) == -1 &&
                     tree[i].pid
                  ) {
                     that.ruleForm.powerList.push(tree[i].pid) //添加父级Id
                     pushParentId(that.treeData) //重新开启循环
                  } else if (
                     that.ruleForm.powerList.indexOf(tree[i].id) == -1 &&
                     tree[i].children &&
                     tree[i].children.length > 0
                  ) {
                     //如果选中列表不存在当前循环到的id,并且当前数据含有子集,使用递归函数,继续循环下一层
                     pushParentId(tree[i].children)
                  } else {
                     // 其他情况...不满足条件就跳出本次循环
                     continue
                  }
               }
            }
            // 启动添加父id的递归函数
            pushParentId(this.treeData)


            // 处理选中id,全部转换为对应的powerId,创建递归函数
            function replacePowerId(tree) {
               tree.forEach((item) => {
                  // 如果存在id
                  if (that.ruleForm.powerList.indexOf(item.id) != -1) {
                     // 把所有id替换为对应的powerId,并重新开始循环
                     that.ruleForm.powerList.splice(that.ruleForm.powerList.indexOf(item.id), 1, item.powerId)
                     replacePowerId(that.treeData)
                  } else {
                     // 如果不存在当前id,就判断是否有子节点,如果有,调用递归函数
                     if (item.children && item.children.length > 0) {
                        replacePowerId(item.children)
                     }
                  }
               })
            }
            // 启动替换id的递归函数
            replacePowerId(this.treeData)

        var data = {};

        if(this.state){
           data['id'] = this.ruleForm.id
           data['name'] =  this.ruleForm.name;
           data['phone'] =  this.ruleForm.phone;
        } else {
          data['name'] =  this.ruleForm.name;
          data['phone'] =  this.ruleForm.phone;
        }




        if (!valid) {
          return false
        } else {
          return editContactUs(data)
          .then((res) => {
            this.$refs.table.refresh(false)
            this.visible = false
            this.$notification.success({
              message: '提示',
              description: res.msg,
            })
          })
        }
      })
      this.preview1 = false
      this.preview = false
    },
    // 复选框选中触发事件
    onSelectChange(selectedRowKeys, selectedRows) {
      this.selectedRowKeys = selectedRowKeys
      this.selectedRows = selectedRows
    },
    //取消右键菜单
    cancelClick() {
      this.menuVisible = false
      document.body.removeEventListener('click', this.cancelClick)
    },
    setRow(record) {
      return {
        on: {
          click: () => {},
          // 右键菜单
          contextmenu: (e) => {
            e.preventDefault()
            this.menuVisible = true
            this.menuStyle.top = e.clientY + 'px'
            this.menuStyle.left = e.clientX + 'px'
            document.addEventListener('click', this.cancelClick)
          },
        },
      }
    },

  },
  mounted() {


  },
  watch: {
    // 去掉表单验证信息二次打开残留
    visible(val, newVal) {
      //监听的是控制模态框显示或隐藏开关的布尔值
      // 监视dialog状态（打开、关闭）
      if (val) {
        try {
          this.$refs['ruleForm'].clearValidate() // 重置编辑表单,移出验证
        } catch (e) {}
      }
    },
  },
}
</script>