<template>
  <div id="sysuser">
    <page-header-wrapper>
      <!-- 搜索/筛选栏 查询/重置 -->
      <a-card :bordered="false">
        <div class="table-page-search-wrapper">
          <a-form layout="inline">
            <a-row :gutter="48">
              <a-col :md="6" :sm="24">
                <a-form-item label="手机号">
                  <a-input v-model="queryCondition.searchParam" placeholder="" />
                </a-form-item>
              </a-col>
              <a-col :md="6" :sm="24">
                <a-form-item label="用户名称">
                  <a-input v-model="queryCondition.userName" placeholder="" />
                </a-form-item>
              </a-col>
              <a-col :md="6" :sm="24">
                <!-- <a-form-item label="上级邀请码">
                  <a-input v-model="queryCondition.parentSalt" placeholder="" />
                </a-form-item> -->
              </a-col>
              <a-col :md="(!advanced && 6) || 24" :sm="24">
                <span
                  class="table-page-search-submitButtons"
                  :style="(advanced && { float: 'right', overflow: 'hidden' }) || {}"
                >
                  <a-button type="primary" @click="$refs.table.refresh(true)">查询</a-button>
                  <a-button
                    style="margin-left: 8px"
                    @click="() => ((this.queryCondition = {}), $refs.table.refresh(true))"
                    >重置</a-button
                  >
                </span>
              </a-col>
            </a-row>
          </a-form>
        </div>
        <!-- 右键菜单 -->
        <a-menu class="menustyle" :style="menuStyle" v-if="menuVisible">
          <a-menu-item>
            <a @click="deleteAll">批量删除</a>
          </a-menu-item>
        </a-menu>
        <!-- 新建 -->
        <div class="table-operator" :title="state ? '修改信息' : '新增信息'">
          <a-button type="primary" icon="plus" @click="handleAdd">新建</a-button>
        </div>
        <!-- 表格 -->
        <s-table
          ref="table"
          size="small"
          rowKey="id"
          :columns="columns"
          :data="loadData"
          :alert="true"
          :rowSelection="rowSelection"
          bordered
          :customRow="setRow"
        >
          <span slot="serial" slot-scope="text, record, index">
            {{ index + 1 }}
          </span>
          <!-- 图片 -->
          <span slot="pic" slot-scope="text, record" type="primary" @click="enlargeImg(record)">
            <img style="width: 50px; height: 50px" :src="record.userHeader" />
          </span>
          <span slot="enable" slot-scope="text, record" type="primary" >
              <a-switch checked-children="开" un-checked-children="关" :checked='record.status==1' @click="unloading(record)" />
          </span>
          <!-- 审核 -->
          <span slot="status" slot-scope="text">
            <a-badge :status="text | statusTypeFilter" :text="text | statusFilter" />
          </span>
          <span slot="status" slot-scope="text">
            <a-badge :status="text | statusTypeFilter" :text="text | statusFilter" />
          </span>
          <span slot="description" slot-scope="text">
            <ellipsis :length="4" tooltip>{{ text }}</ellipsis>
          </span>
          <span slot="action" slot-scope="text, record">
            <template>
              <a @click="openInfo(record)">查看</a>
              <a-divider type="vertical" />
              <a @click="handleEdit(record)">修改</a>
              <!-- <a-divider type="vertical" /> -->
              <!-- <a-popconfirm title="确定要删除吗?" ok-text="确定" cancel-text="取消" @confirm="handleDel(record)">
                <a>删除</a>
              </a-popconfirm> -->
            </template>
          </span>
        </s-table>
      </a-card>
      <!-- 抽屉 -->
      <template>
        <div>
          <a-drawer
            :title="state ? '修改用户' : '新增用户'"
            :placement="placement"
            :closable="false"
            :visible="visible"
            @close="onClose"
            width="800px"
          >
            <a-form-model
              :model="userForm"
              :label-col="labelCol"
              :wrapper-col="wrapperCol"
              :rules="rules"
              ref="userForm"
            >
              <a-form-model-item label="手机号" prop="phone">
                <a-input v-model="userForm.phone" />
              </a-form-model-item>
              <a-form-model-item label="登录密码" :prop="state? '' : 'loginPassword'" v-if="!state">
                <a-input v-model="userForm.loginPassword" />
              </a-form-model-item>



              <a-form-model-item label="用户名称" prop="userName">
                <a-input v-model="userForm.userName" />
              </a-form-model-item>
              <a-form-model-item label="角色类型"  :required="true">


                <a-select mode="tags" style="width: 100%" placeholder="(支持多角色)" @change="typeTreea" v-model="userForm.roleCode">
                  <a-select-option v-for="item in roleTypeList" :key="item.roleCode">
                    {{ item.roleName}}
                  </a-select-option>
                </a-select>
              </a-form-model-item>

              <a-form-model-item has-feedback label="是否为校长或老师" v-if="state" >

                  <a-switch default-checked :checked="userForm.isPrincipalTeacher" @click="userForm.isPrincipalTeacher=!userForm.isPrincipalTeacher"/>
              </a-form-model-item>

              <a-form-model-item label="学校"  :required="true" v-if="userForm.isPrincipalTeacher">
                <a-select style="width: 100%" placeholder="" @change="changeSchool" v-model="userForm.schoolId">
                  <a-select-option v-for="item in schoolList" :key="item.id" :value="item.id">
                    {{ item.schoolName}}
                  </a-select-option>
                </a-select>
              </a-form-model-item>

              <a-form-model-item label="班级"  v-if="userForm.isPrincipalTeacher">
                <a-select style="width: 100%" placeholder="" v-model="userForm.classId">
                  <a-select-option v-for="item in schoolClassList" :key="item.id" :value="item.id">
                    {{ item.className}}
                  </a-select-option>
                </a-select>
              </a-form-model-item>


              <a-form-model-item label="用户头像" >
                <div
                  class="ant-upload-preview ant-upload ant-upload-select ant-upload-select-picture-card"
                  @click="$refs.upimg.edit()"
                >
                  <img v-if="userForm.img" :src="userForm.img" style="height: 100px; width: 100px" />
                  <img v-else src="../../../assets/upload.jpg" style="height: 50px; width: 50px; margin-top: 25%" />
                </div>
                <HeadCut ref="upimg" @ok="setavatar" />
              </a-form-model-item>


              <!-- <a-form-model-item label="上级邀请码" >
                <a-input v-model="userForm.parentSalt" />
              </a-form-model-item> -->

              <a-form-model-item has-feedback label="是否可用月付" v-if="state" >

                  <a-switch default-checked :checked="userForm.isPayMonthly" @click="userForm.isPayMonthly=!userForm.isPayMonthly"/>
              </a-form-model-item>

              <a-button type="primary" @click="handleOk" style="margin-left: 17%"> 确定 </a-button>

            </a-form-model>
          </a-drawer>
        </div>
      </template>

      <!-- 模态框 -->
         <a-modal
          title="详情"
          :visible="isShow"
          :width="900"
          :footer="null"
          @cancel="isShow = false"

        >
        <h4>消费总金额：{{rowInfo.sumMoney}}</h4>
        <a-tabs default-active-key="1" @change="callback">
          <a-tab-pane key="1" tab="全部订单">
            <template>
                <a-table :columns="columnsOrder" :data-source="rowInfo.orderList" rowKey="id" :bordered="true" :pagination="pagination">
                  <span slot="payTypeName" slot-scope="text">
                    <a-badge color="#2db7f5"   :text="text | payTypeFilter" />
                  </span>


                </a-table>
            </template>

          </a-tab-pane>
          <a-tab-pane key="2" tab="使用的卡" force-render>
            <template>
                <a-table :columns="columnsCard" :data-source="rowInfo.cardList" rowKey="id" :bordered="true" :pagination="pagination2">

                    <span slot="pics" slot-scope="text, record" type="primary" @click="enlargeImg(record)">

                      <img style="width: 50px; height: 50px" :src="record.skuPic" />
                    </span>

                </a-table>
            </template>
          </a-tab-pane>
           <a-tab-pane key="3" tab="余额明细" force-render>
            <template>
                <a-table :columns="columnsMoney" :data-source="rowInfo.moneyInfo" rowKey="id" :bordered="true" :pagination="pagination3">



                </a-table>
            </template>
          </a-tab-pane>
        </a-tabs>
        </a-modal>
      <div>
        <!-- 图片预览 -->
        <a-modal v-model="enlarge" title="预览" @ok="en" okText="完成" width="500px" cancelText="关闭">
          <img style="width: 200px; height: 200px" :src="icooon" class="preview" />
        </a-modal>
      </div>
    </page-header-wrapper>
  </div>
</template>

<script>
// 引入表格组件 和
import { STable, Ellipsis } from '@/components'
// 引入调用接口方法
// import {  editUser, deleteCompany, filesCompany, typeCompany } from '@/api/company'

import {  getUserListPage ,editUser,getRoleTypeList, getSchoolPage, removeUser ,editUserStatus,getCardListByUserCOde} from '@/api/system'

import { getCompanyList } from '@/api/system'
// import { FormModel } from 'ant-design-vue'
import router from '@/router'
import HeadCut from '@/views/system/user/HeadCut'

// Vue.use(FormModel)
// import StepByStepModal from '@/views/list/modules/StepByStepModal'
// 引入操作/配置/弹出框组件
// import CreateForm from '@/views/list/modules/CreateForm'

//订单Table
const columnsOrder = [
  {
    title: '订单编号',
    dataIndex: 'orderSn',
    align: 'center',
  },
  {
    title: '商户单号',
    dataIndex: 'batchId',
    align: 'center',
  },
  {
    title: '下单时间',
    dataIndex: 'createdDate',
    align: 'center',
  },
   {
    title: '支付方式',
    dataIndex: 'payType',
    scopedSlots: { customRender: 'payTypeName' },
    align: 'center',
  },
  {
    title: '状态',
    dataIndex: 'orderStatusName',
    align: 'center',
  },

]

//臻香卡Table
const columnsCard =[
    {
    title: '臻香卡编号',
    dataIndex: 'encode',
    align: 'center',
  },
  {
    title: '提货码',
    dataIndex: 'cardCode',
    align: 'center',
  },
  {
    title: '商品类型',
    dataIndex: 'type',
    align: 'center',
  },
  {
    title: '绑定时间',
    dataIndex: 'date',
    align: 'center',
  },

]


//臻香卡Table
const columnsMoney =[

  {
    title: '服务名称',
    dataIndex: 'name',
    align: 'center',
  },
  {
    title: '余额变动',
    dataIndex: 'money',
    align: 'center',
  },
  {
    title: '当前总余额',
    dataIndex: 'userMoney',
    align: 'center',
  },

]

const columns = [
  // {
  //   title: '#',
  //   width: '70px',
  //   scopedSlots: { customRender: 'serial' },
  //   align: 'center',
  // },
  {
    title: '用户名称',
    dataIndex: 'userName',
    align: 'center',
  },
  {
    title: '头像',
    // width: '50px',
    dataIndex: 'userHeader',
    scopedSlots: { customRender: 'pic' },
    align: 'center',
  },
  {
    title: '手机号',
    dataIndex: 'userPhone',
    align: 'center',
  },
  // {
  //   title: '邀请码',
  //   dataIndex: 'salt',
  //   align: 'center',
  // },
  // {
  //   title: '我的上级邀请码',
  //   dataIndex: 'parentSalt',
  //   align: 'center',
  // },
  // {
  //   title: '可提现余额',
  //   dataIndex: 'userBalance',
  //   align: 'center',
  // },
  // {
  //   title: '不可提现余额',
  //   dataIndex: 'userNotBalance',
  //   align: 'center',
  // },
  {
    title: '停用/启用',
    dataIndex: 'status',
    scopedSlots: { customRender: 'enable' },
    align: 'center',
  },

  {
    title: '最后一次登录时间',
    dataIndex: 'loginTime',
    align: 'center',
  },
  {
    title: '操作',
    dataIndex: 'action',

    scopedSlots: { customRender: 'action' },
    align: 'center',
  },
]

const payTypeMap = {
 0:{
  text:"未支付"
  },
 1:{
  text:"支付宝"
 },
 2:{
  text:"微信"
 },
 3:{
  text:"余额"
 }
}


const statusMap = {
  1: {
    status: 'default',
    text: '待认证',
  },
  2: {
    status: 'success',
    text: '已认证',
  },
  3: {
    status: 'error',
    text: '未通过',
  },
}
function getBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onload = () => resolve(reader.result)
    reader.onerror = (error) => reject(error)
  })
}
export default {
  name: 'sysuser',
  components: {
    STable,
    Ellipsis,
    HeadCut,
  },
  data() {
    this.columns = columns
    this.columnsCard = columnsCard
    this.columnsOrder = columnsOrder
    this.columnsMoney = columnsMoney

    return {
      schoolList: [],
      schoolClassList: [],
      pagination:{
        total:0, //总条数
        defaultPageSize:5, //一页显示几条数据
      },
      pagination2:{
        total:0, //总条数
        defaultPageSize:5, //一页显示几条数据
      },

      pagination3:{
         total:0, //总条数
        defaultPageSize:10, //一页显示几条数据
      },
      isShow:false, //模态框
      preview: false,
      preview1: false,
      // 公司类型下拉
      size: 'default',
      // 上传图片
      previewVisible: false,
      previewVisible2: false,
      previewImage: '',
      previewImage2: '',
      // 新增,修改按钮弹窗状态
      visiblea: false,
      // 抽屉要从哪边显示
      placement: 'right',
      // 上传图片要用到的数组
      fileList: [],
      labelCol: { span: 4 },
      wrapperCol: { span: 14 },
      // 右键菜单显示/隐藏
      menuVisible: false,
      //新增修改状态
      state: false,
      idfalse: false,

      //用户表单
      userForm: {
        phone:"", //手机号
        role: "", //角色
        userName:"", //用户名称
        password:"", //密码
        img:"", //用户头像
        roleCode:[], // 角色代码
        parentAccount:"", //	上级账号
        parentSalt:"", //上级邀请码
        loginPassword:"", //	用户登录密码
        isPrincipalTeacher: "", // 是否可用月付 0.否 1.是
        isPayMonthly: "", // 是否可用月付 0.否 1.是
      },

      roleType:[],  //角色列表吗


      companyForm: {
        companyName: '',
        companyType: 0,
        userId: '',
        icon: '',
        licenseUrl: '',
        describe: '',
        nickName: '',
        introduce: '',
        id: 0,
        oldImg: '',
      },
      oldImg: [],
      // 表单验证
      rules: {
        userName: [
          { required: true, message: '请输用户名称' },
          { max: 10, message: '最大10个字符' },
          { min: 3, message: '最小3个字符' },
        ],
        phone:[
           { required: true, message: '请输入手机号' },
          { whitespace: true, message: '不能添加空格' },
          // { pattern: /^[\u4e00-\u9fa5]{0,}$/, message: '输入有误' },
          { max: 11, message: '最大11个字符' },
          { min: 11, message: '最小11个字符' },
        ],
        loginPassword:[
           { required: true, message: '请输入登录密码' },
        ]
      },
      //  图片弹窗
      icooon: '',
      enlarge: false,
      //   增加修改弹窗状态
      visible: false,
      // 右键菜单样式
      menuStyle: {
        position: 'fixed',
        top: '0',
        left: '0',
        zIndex: 1,
        borderRadius: '5px',
        border: '1px solid #eee',
      },
      // create model
      userConfigIsShow: true,
      visible: false,
      // confirmLoading: false,
      mdl: null,
      // 高级搜索 展开/关闭
      advanced: false,
      // 查询参数
      queryParam: {},
      queryCondition: {
        searchParam: '', //手机号
        // parentSalt:'', //上级邀请码
        // saltTwo:'',  //邀请码
        userName:'',
      },
      // 分页参数
      pageFrom: {
        // pageNum: 1, //第几次请求
        // pageSize: 10, //每页显示几条
        // totalPages: 0, //请求总次数
        // totalSize: 0, //所有数据数量
      },
      // 加载数据方法 必须为 Promise 对象
      loadData: (parameter) => {
        const requestParameters = Object.assign({}, parameter, this.pageFrom)
        return getUserListPage(requestParameters, this.queryCondition)
          .then((res) => {
            if (res.code == 200) {


              const pageData = {
                data: res.data.records,
                pageNo: Number(res.data.current) ,
                pageSize: Number(res.data.size),
                totalCount: Number(res.data.total),
                totalPage: Number(res.data.pages),
              }
              return pageData
            } else {
              return
            }
          })
          .catch((err) => {
            alert(err)
          })
      },
      //表格选中行的ID
      selectedRowKeys: [],
      //表格选中行的所有数据
      selectedRows: [],
      // 公司类型
      typecompanya: [],
      roleTypeList:[], //角色类型
      roleType:'',
      companyType: '',

      typeId: '',
      rowInfo:{
        orderList:[], //用户的所有订单
        cardList:[], //使用的激活卡
        moneyInfo:[], //余额变动信息
        sumMoney:0, //总消费金额
      },
    }
  },
  filters: {

    payTypeFilter(type) {
      return payTypeMap[type].text
    },
    statusFilter(type) {
      return statusMap[type].text
    },
    statusTypeFilter(type) {
      return statusMap[type].status
    },
  },
  computed: {
    rowSelection() {
      return {
        selectedRowKeys: this.selectedRowKeys,
        onChange: this.onSelectChange,
      }
    },
  },
  methods: {
    unloading(item){

      if(item.status ==1){
        item.status = 0;
      }else{
        item.status = 1;

      }

      return editUserStatus({
          userCode:item.userCode,
          status: item.status,
          dataVersion: item.dataVersion,
      }).then((res) => {
            if(res.code == 200){
              this.$notification.success({
                message: '提示',
                description: "操作成功",
              })
              this.$refs.table.refresh(false);
            }

      })
     },
    onClose() {
      this.visible = false
    },
    onChange(e) {
      this.placement = e.target.value
    },

    getLocalStorage() {
      // this.companyForm.userId = JSON.parse(localStorage.getItem('cf01'))
      // console.log(this.companyForm.userId)
    },

    setavatar( url) {
      // console.log(url)
      this.userForm.img = url;
      this.preview = true
    },

    // 下拉树
    typeTreea(value) {

      this.userForm.roleCode = value;

    },
    
    changeSchool(value) {
      let obj = this.schoolList.find(e => e.id === value);
      this.schoolClassList =  obj.schoolClassList;
      delete this.userForm.classId;
    },
    // 上传图片
    handleCancel() {
      this.previewVisible = false
    },
    handleCancel2() {
      this.previewVisible = false
    },

    // 上传后预览回调
    async handlePreview(file) {
      if (!file.url && !file.preview) {
        file.preview = await getBase64(file.originFileObj)
      }
      this.previewImage = file.url || file.preview
      this.previewVisible = true
    },


    async handlePreview2(file) {
      if (!file.url && !file.preview) {
        file.preview = await getBase64(file.originFileObj)
      }
      this.previewImage = file.url || file.preview
      this.previewVisible = true
    },
    // 上传图片的回调函数,上传完成后请求后台处理图片接口
    handleChange({ file, fileList }) {
      if (file.status == 'removed') {
        this.oldImg.push(this.fileList[0].url)
        this.fileList = fileList
      }
      if (file.status == 'uploading') {
        //此处上传中的回调
        const myform = new FormData()
        myform.append('files', fileList[0].originFileObj)
        myform.append('type', 5)
        // // 上传图片接口
        return filesCompany(myform).then((res) => {
          // 返回图片链接
          this.companyForm.icon = res.data[0]
          this.fileList.push({
            uid: '-1',
            name: 'image.png',
            status: 'done',
            url: res.data[0],
          })
        })
      }
    },
    // 上传图片的回调函数,上传完成后请求后台处理图片接口
    handleChange2({ file, fileList }) {
      if (file.status == 'removed') {
        this.oldImg.push(this.fileList2[0].url)
        this.fileList2 = fileList
      }
      if (file.status == 'uploading') {
        //此处上传中的回调
        const myform = new FormData()
        myform.append('files', fileList[0].originFileObj)
        myform.append('type', 5)
        // // 上传图片接口
        return filesCompany(myform).then((res) => {
          // 返回图片链接
          this.companyForm.licenseUrl = res.data[0]
          this.fileList2.push({
            uid: '-1',
            name: 'image.png',
            status: 'done',
            url: res.data[0],
          })
        })
      }
    },
    examine(e) {
      this.visiblea = false
    },
    enlargeImg(record) {
      this.icooon = record.userHeader
      this.enlarge = true
    },
    en(e) {
      this.enlarge = false
    },

    callback(key){
      console.log(key)

    },
    //新增
    handleAdd() {
      this.state = false
      this.preview = false
      this.preview1 = false
      this.userForm.phone = '';
      this.userForm.role = '';
      this.userForm.userName = '';

      this.userForm.password = '';
      this.userForm.img = '';
      this.userForm.roleCode = [];
      this.userForm.parentAccount = '';
      this.userForm.parentAccount = '';
      this.userForm.loginPassword = '';


      this.visible = true
      this.fileList = []
      this.roleType = '';

    },
    //打开用户信息查询数据
    openInfo(record){


      //  rowInfo:{
      //   orderList:[], //用户的所有订单
      //   cardList:[], //使用的激活卡
      // },


       return getCardListByUserCOde({
        userCode:record.userCode, //
       }).then((res) => {



         this.rowInfo.orderList = res.data.orderList;

         this.rowInfo.orderList.map(item=>{
           if(!item.payType){
             item.payType = "0";
           }
         })



         this.pagination.total =  res.data.orderList.length;

         this.rowInfo.cardList = res.data.cardList;
         this.pagination2.total = res.data.cardList.length;

         this.rowInfo.moneyInfo = res.data.moneyInfo;
         this.pagination3.total = res.data.moneyInfo.length;



         this.rowInfo.sumMoney = res.data.sumMoney;





         this.isShow = true;

      })

      // 用户 userCode  record.userCode
      console.log(record)


    },
    // 修改
    handleEdit(record) {


      this.userForm['userCode'] = record.userCode;
      this.userForm.isPrincipalTeacher = record.isPrincipalTeacher?true:false;

      this.userForm.phone = record.userPhone;
      this.userForm.userName = record.userName;
      this.userForm.roleCode = record.roleCode.split(',');

      this.userForm.img = record.userHeader;

      this.userForm.parentAccount = record.parentAccount;

      this.userForm.parentSalt = record.parentSalt;
      this.userForm.isPayMonthly = record.isPayMonthly == 0?false:true;

      this.userForm['dataVersion'] = record.dataVersion;

      this.fileList.push({
        uid: '-1',
        name: 'image.png',
        status: 'done',
        url: record.userHeader,
      })

      this.visible = true
      this.state = true




    },
    // 删除
    handleDel(record) {

      return removeUser({
        dataVersion:record.dataVersion, //
        userCode:record.userCode, //
       }).then((res) => {
        this.$refs.table.refresh(false)
        this.$notification.success({
          message: '提示',
          description: '删除成功',
        })
      })
    },
    // 批量删除
    deleteAll(record) {
      alert()

        var that = this
        this.$confirm({
          title: '警示',
          content: '确定要全部删除吗?',
          onOk() {
            alert()
            return removeUser({
              dataVersion:record.dataVersion, //
              userCode:record.userCode, //
             }).then((res) => {
              that.$refs.table.refresh(false)
              that.$notification.success({
                message: '提示',
                description: res.message,
              })
            })
          },
          onCancel() {},
        })

    },
    // 提交
    handleOk(e) {
      this.$refs.userForm.validate((valid) => {

        // return
        // 校验未全部通过，结束当前提交 (验证失败)
        // this.companyForm.oldImg = this.oldImg.join(',')
        if (!valid) {
          return false
        } else {
          return editUser(this.state,this.state?
          {
            //修改参数
            loginAccount:this.userForm.phone,
            parentAccount:this.userForm.parentAccount,
            parentSalt:this.userForm.parentSalt,
            roleCode:this.userForm.roleCode.join(','),
            userCode:this.userForm.userCode,
            userHeader:this.userForm.img,
            userName:this.userForm.userName,
            userPhone:this.userForm.phone,
            dataVersion:this.userForm.dataVersion,
            isPayMonthly:this.userForm.isPayMonthly?1:0,
            isPrincipalTeacher: this.userForm.isPrincipalTeacher?1:0,
            schoolId: this.userForm.schoolId,
            classId: this.userForm.classId,
          }:{
            //新增参数
            loginAccount:this.userForm.phone,
            loginPassword:this.userForm.loginPassword,
            parentAccount:this.userForm.parentAccount,
            parentSalt:this.userForm.parentSalt,
            roleCode:this.userForm.roleCode.join(','),
            userHeader:this.userForm.img,
            userName:this.userForm.userName,
            isPayMonthly:this.userForm.isPayMonthly?1:0,
            isPrincipalTeacher: this.userForm.isPrincipalTeacher?1:0,
            schoolId: this.userForm.schoolId,
            classId: this.userForm.classId,


          }).then((res) => {
            console.log(res)
            this.$refs.table.refresh(false)
            this.visible = false
            this.$notification.success({
              message: '提示',
              description: "操作成功",
            })
          })
        }
      })
      this.preview1 = false
      this.preview = false
    },
    // 复选框选中触发事件
    onSelectChange(selectedRowKeys, selectedRows) {
      this.selectedRowKeys = selectedRowKeys
      this.selectedRows = selectedRows
    },
    //取消右键菜单
    cancelClick() {
      this.menuVisible = false
      document.body.removeEventListener('click', this.cancelClick)
    },
    setRow(record) {
      return {
        on: {
          click: () => {},
          // 右键菜单
          contextmenu: (e) => {
            e.preventDefault()
            this.menuVisible = true
            this.menuStyle.top = e.clientY + 'px'
            this.menuStyle.left = e.clientX + 'px'
            document.addEventListener('click', this.cancelClick)
          },
        },
      }
    },
    getroleType() {
      return getRoleTypeList()
      .then((res) => {
        if(res.code==200){
          this.roleTypeList = res.data;

        }
      })
    },
    getSchoolList() {
      return getSchoolPage({
        pageNum: 1,
        pageSize: 50
      }, {
        schoolName: ''
      })
      .then((res) => {
        if(res.code==200){
          this.schoolList = res.data.records;
        }
      })
    },
  },
  mounted() {
    this.getroleType();
    this.getSchoolList();
    // this.getLocalStorage()
  },
  watch: {
    // 去掉表单验证信息二次打开残留
    visible(val, newVal) {
      //监听的是控制模态框显示或隐藏开关的布尔值
      // 监视dialog状态（打开、关闭）
      if (val) {
        try {
          this.$refs['companyForm'].clearValidate() // 重置编辑表单,移出验证
        } catch (e) {}
      }
    },
  },
}
</script>